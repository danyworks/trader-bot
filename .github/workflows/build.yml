name: Build Wails App
on:
  workflow_dispatch:
    inputs:
      go-version:
        required: false
        type: string
        default: '1.23.6'
      node-version:
        required: false
        type: string
        default: '22.x'
      wails-version:
        required: false
        type: string
        default: 'v2.9.2'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: app-linux
          - os: windows-latest
            platform: windows
            artifact_name: app-windows
          - os: macos-latest
            platform: darwin
            artifact_name: app-macos
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          
      # Linux dependencies
      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev
          sudo apt-get install -y libgl1-mesa-dev xorg-dev
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          pkg-config --libs webkit2gtk-4.1

      # macOS dependencies
      - name: Install macOS Dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config
          brew install gtk+3
          brew install webkit2gtk-4.1
          brew install gcc

      # Windows dependencies
      - name: Install Windows Dependencies
        if: matrix.os == 'windows-latest'
        run: |
          # Install required tools for NSIS
          choco install nsis
          # Install mingw for gcc
          choco install mingw
          # Refresh environment variables
          refreshenv

      - name: Install Wails
        shell: bash
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@${{ inputs.wails-version }}
          
      - name: Build Frontend
        working-directory: frontend
        run: |
          npm install
          npm run build
          
      # Linux build
      - name: Build Wails App (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          wails build -platform linux/amd64 -tags webkit2_41
          
      # Windows build
      - name: Build Wails App (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:PATH += ";C:\Program Files (x86)\NSIS"
          $env:PATH += ";C:\Program Files\Go\bin"
          wails build -platform windows/amd64 -nsis
          
      # macOS build
      - name: Build Wails App (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          wails build -platform darwin/amd64
          # Create DMG
          npm install -g create-dmg
          create-dmg build/bin/*.app build/bin/ || true
          
      # Upload artifacts
      - name: Upload Linux Artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: build/bin/*
          
      - name: Upload Windows Artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            build/bin/*.exe
            build/bin/*.msi
            
      - name: Upload macOS Artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            build/bin/*.app
            build/bin/*.dmg

      # Optional: Sign the apps for production
      # Note: You'll need to set up code signing certificates and secrets
      - name: Sign macOS App
        if: matrix.os == 'macos-latest' && github.event_name == 'release'
        run: |
          echo "Add your codesigning steps here"
          
      - name: Sign Windows App
        if: matrix.os == 'windows-latest' && github.event_name == 'release'
        run: |
          echo "Add your codesigning steps here"
